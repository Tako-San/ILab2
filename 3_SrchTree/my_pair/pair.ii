
template <typename Key, typename Val>
Pair<Key, Val>::Pair( ) : key_{}, val_{}
{}

template <typename Key, typename Val>
Pair<Key, Val>::Pair( Key key, Val val ) : key_{key}, val_{val}
{}

template <typename Key, typename Val>
Pair<Key, Val>::Pair( Key key ) : key_{key}, val_{}
{}

template <typename Key, typename Val>
Pair<Key, Val> & Pair<Key, Val>::operator = ( const Val & val )
{
    val_ = val;
    return *this;
}

template <typename Key, typename Val>
const Key & Pair<Key, Val>::get_key( ) const
{ return key_; }

template <typename Key, typename Val>
const Val & Pair<Key, Val>::get_val( ) const
{ return val_; }

template <typename Key, typename Val>
bool Pair<Key, Val>::operator < ( const Pair & pair ) const
{ return key_ < pair.key_; }

template <typename Key, typename Val>
bool Pair<Key, Val>::operator > ( const Pair & pair ) const
{ return key_ > pair.key_; }

template <typename Key, typename Val>
bool Pair<Key, Val>::operator <= ( const Pair & pair ) const
{ return key_ <= pair.key_; }

template <typename Key, typename Val>
bool Pair<Key, Val>::operator >= ( const Pair & pair ) const
{ return key_ >= pair.key_; }

template <typename Key, typename Val>
bool Pair<Key, Val>::operator == ( const Pair & pair ) const
{ return key_ == pair.key_; }

template <typename Key, typename Val>
std::ostream & operator << (std::ostream & ost, const Pair<Key, Val> & pr)
{
    ost << "Key: " << pr.get_key() << ", Val: " << pr.get_val();
    return ost;
}

template <typename Key, typename Val>
std::istream & operator >> (std::istream & ist, Pair<Key, Val> & pr)
{
    ist >> pr.key_ >> pr.val_;
    return ist;
}

template <typename Key, typename Val>
bool operator < ( const Pair<Key, Val> & pair, const Key & key )
{ return pair.get_key() < key; }

template <typename Key, typename Val>
bool operator < ( const Key & key, const Pair<Key, Val> & pair )
{ return key < pair.get_key(); }

template <typename Key, typename Val>
bool operator <= ( const Pair<Key, Val> & pair, const Key & key )
{ return pair.get_key() <= key; }

template <typename Key, typename Val>
bool operator <= ( const Key & key, const Pair<Key, Val> & pair )
{ return key < pair.get_key(); }

template <typename Key, typename Val>
bool operator > ( const Pair<Key, Val> & pair, const Key & key )
{ return pair.get_key() > key; }

template <typename Key, typename Val>
bool operator > ( const Key & key, const Pair<Key, Val> & pair )
{ return key > pair.get_key(); }

template <typename Key, typename Val>
bool operator >= ( const Pair<Key, Val> & pair, const Key & key )
{ return pair.get_key() >= key; }

template <typename Key, typename Val>
bool operator >= ( const Key & key, const Pair<Key, Val> & pair )
{ return key > pair.get_key(); }

template <typename Key, typename Val>
bool operator == ( const Pair<Key, Val> & pair, const Key & key )
{ return pair.get_key() == key; }

template <typename Key, typename Val>
bool operator == ( const Key & key, const Pair<Key, Val> & pair )
{ return key == pair.get_key(); }
